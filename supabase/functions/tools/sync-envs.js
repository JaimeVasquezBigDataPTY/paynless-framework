// tools/sync-envs.js
import fs from 'node:fs/promises';
import path from 'node:path';
import { config } from 'dotenv'; // npm i dotenv

// --- Configuration ---
const rootDir = path.resolve(process.cwd(), '../..'); // Adjust if script location differs
const rootEnvPath = path.join(rootDir, '.env');
const supabaseEnvPath = path.join(rootDir, 'supabase', '.env.local');

// List ONLY the keys needed by Supabase functions
const supabaseRequiredKeys = [
  'SUPABASE_URL', // Usually generated by Supabase locally
  'SUPABASE_ANON_KEY', // Usually generated by Supabase locally
  'SUPABASE_SERVICE_ROLE_KEY', // Usually generated by Supabase locally
  'STRIPE_SECRET_TEST_KEY',
  'STRIPE_TEST_WEBHOOK_SECRET',
  'STRIPE_SECRET_LIVE_KEY',      // Optional, but good practice
  'STRIPE_LIVE_WEBHOOK_SECRET', // Optional, but good practice
  'STRIPE_TEST_MODE',           // Should be 'true' for local dev
  // Add any other secrets your functions need
];
// --- End Configuration ---

async function syncEnvs() {
  console.log(`Loading root environment from: ${rootEnvPath}`);
  const { parsed: rootEnv, error: rootEnvError } = config({ path: rootEnvPath });

  if (rootEnvError) {
    console.error('Error loading root .env file:', rootEnvError);
    // Decide if this is fatal - maybe only warn if running locally?
    // process.exit(1);
  }
  if (!rootEnv) {
    console.warn('Root .env file not found or empty.');
    // Potentially exit or continue depending on requirements
  }

  console.log('Filtering for Supabase required keys...');
  let supabaseEnvContent = '';
  const missingKeys = [];

  for (const key of supabaseRequiredKeys) {
    const value = process.env[key] || rootEnv?.[key]; // Check process.env first, then .env file
    if (value !== undefined) {
      // Basic sanitization: ensure no newlines in value
      const sanitizedValue = String(value).replace(/[\r\n]+/g, '');
      supabaseEnvContent += `${key}=${sanitizedValue}\n`;
    } else {
      // Allow Supabase generated keys to be missing from root .env
      if (!key.startsWith('SUPABASE_')) {
          missingKeys.push(key);
      }
    }
  }

   // Add Supabase generated keys if they aren't in root .env (common locally)
   // You might need more robust logic if these can come from the root .env too
   if (!rootEnv?.['SUPABASE_URL']) {
       supabaseEnvContent += `SUPABASE_URL=http://localhost:54321\n`; // Default local URL
   }
    if (!rootEnv?.['SUPABASE_ANON_KEY']) {
       supabaseEnvContent += `SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0\n`; // Default local anon key
   }
    if (!rootEnv?.['SUPABASE_SERVICE_ROLE_KEY']) {
       supabaseEnvContent += `SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU\n`; // Default local service key
   }


  if (missingKeys.length > 0) {
    console.warn(`Warning: The following required keys were not found in root .env or process.env: ${missingKeys.join(', ')}`);
    // Decide if this is fatal
  }

  try {
    console.log(`Writing to Supabase .env.local: ${supabaseEnvPath}`);
    await fs.writeFile(supabaseEnvPath, supabaseEnvContent.trim(), 'utf8');
    console.log('Successfully synced environment variables to supabase/.env.local');
  } catch (writeError) {
    console.error('Error writing supabase/.env.local:', writeError);
    process.exit(1);
  }

  // Optional: Add logic here to call `supabase secrets set` for deployment environments
  // Requires checking the target environment (e.g., via process.env.NODE_ENV or similar)
}

syncEnvs().catch(err => {
  console.error("Sync script failed:", err);
  process.exit(1);
});